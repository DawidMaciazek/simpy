import logging
log = logging.getLogger(__name__)


class xyz:
    def __init__(self, filename):
        try:
            self.filename = filename
            log.info("Successfully opened file for writing: %s" % filename)
            self.outfile = open(filename, 'w')
        except IOError:
            log.error("Could not open file for writing: %s" % filename)

    def write(self, types, coords, extra=None,
              comment="generated by sympy lib"):

        self.comment = comment

        if type(types) == list and type(types[0]) == str:
            # single frame mode
            self.write_frame(types, coords, extra)

        elif (type(types) == list and type(types[0]) == list and
              type(types[0][0]) == str):
            # multi frame mode
            if len(types) != len(coords):
                log.error("Types number of frames is different than coords"
                          "coords: %i \ntypes %i" %
                          (len(coords), len(types)))
            if (extra is not None) and (len(types) != len(extra)):
                log.error("Extra frames number is different than rest\n"
                          "coords: %i \ntypes %i\nextra %i" %
                          (len(coords), len(types), len(extra)))

            frames_total = len(coords)
            if extra is None:
                extra = [None]*frames_total

            for i in xrange(frames_total):
                log.info("Writing frame %i/%i" % (i, frames_total))
                self.write_frame(types[i], coords[i], extra[i])

        else:
            log.error("This is not a frame or a list of frames")


    def write_frame(self, types, coords, extra):
        outfile = self.outfile
        coords_n = len(coords)
        types_n = len(types)

        if extra is None:
            extra = ['']*coords_n
        extra_n = len(extra)

        if coords_n != types_n:
            log.error("Coords and type list have different length:"
                      "\ncoords: %i \ntypes: %i" % (coords_n, types_n))

        if coords_n != extra_n:
            log.error("Extra list have different length than type or atoms"
                        "list\ncoords: %i \ntypes: %i \nextra: %i"
                        % (coords_n, types_n, extra_n))

        outfile.write("%i\n%s\n" % (coords_n, str(self.comment)))
        for i in xrange(coords_n):
            outfile.write("%s %f %f %f %s\n" %
                            (types[i], coords[i][0], coords[i][1], coords[i][2],
                            extra[i]))

    def close(self):
        try:
            self.outfile.close()
            log.info("Successfully saved file: %s" % self.filename)
        except IOError:
            log.error("Problems encountered when closing file: %s" %
                      self.filename)


class lmpdat:
    def __init__(self, filename):
        self.filename = filename
