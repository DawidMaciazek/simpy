import logging
import tools
log = logging.getLogger(__name__)


class xyz:
    def __init__(self, filename, precision=3):
        try:
            self.filename = filename
            log.info("Successfully opened file for writing: %s" % filename)
            self.outfile = open(filename, 'w')
        except IOError:
            log.error("Could not open file for writing: %s" % filename)

        if type(precision) is not int:
            precision = 3

        self.outformat = "%%s %%.%if %%.%if %%.%if%%s\n" % \
            (precision, precision, precision)

    def write(self, frames, extra=None):

        # single frame mode
        if isinstance(frames, tools.Frame):
            self.write_frame(frames, extra)

        # list of frames mode
        elif type(frames) == list:
            frame_number = len(frames)

            for i in range(frame_number):
                log.info("Writing frame %i/%i" % (i, frame_number))
                self.write_frame(frames[i])

        else:
            log.error("Passed object is not Frame or list of Frames")

    def write_frame(self, frame, extra=None):
        outfile = self.outfile
        coord_number = len(frame)
        outformat = self.outformat

        comment = frame['comment']
        if not comment:
            comment = 'xyz file generated by simpy lib'

        coords = frame['coord']
        elements = frame['element']
        if elements is None:
            elements = frame['types']
            if not elements:
                frame.gen_element()
                elements = frame['element']

        if extra is None:
            extra = ['']*coord_number
        else:
            extra_list = []
            for extra_key in extra:
                extra_list.append(frame[extra_key])

            extra = ['']*coord_number
            for i in xrange(coord_number):
                for j in xrange(len(extra_list)):
                    extra += ' ' + str(extra_list[j][i])

        outfile.write("%i\n%s\n" % (coord_number, comment))
        for i in xrange(coord_number):
            outfile.write( outformat %
                          (elements[i], coords[i][0], coords[i][1],
                           coords[i][2], extra[i]))

    def close(self):
        try:
            self.outfile.close()
            log.info("Successfully saved file: %s" % self.filename)
        except IOError:
            log.error("Problems encountered when closing file: %s" %
                      self.filename)

class lammpstrj:
    def __init__(self, filename, fields=None):
        try:
            self.filename = filename
            log.info("Successfully opened file for writing: %s" % filename)
            self.outfile = open(filename, 'w')
        except IOError:
            log.error("Could not open file for writing: %s" % filename)

        self.fields = fields

    def write(self, frames):
        # single frame mode
        if isinstance(frames, tools.Frame):
            self.write_frame(frames)

        # list of frames mode
        elif type(frames) == list:
            frame_number = len(frames)

            for i in range(frame_number):
                log.info("Writing frame %i/%i" % (i, frame_number))
                self.write_frame(frames[i])
        else:
            log.error("Passed object is not Frame or list of Frames")

    def write_frame(self, frame):
        header = "ITEM: TIMESTEP\n0.0\n"
        header += "ITEM: NUMBER OF ATOMS\n{}\n".format(len(frame["coord"]))
        header += "ITEM: BOX BOUNDS pp pp pp\n-100 100\n-100 100\n-100 100\n"
        header += "ITEM: ATOMS element x y z q"

        self.outfile.write(header)

        for i in xrange(len(frame["coord"])):
            self.outfile.write("\n{} {} {} {} {}".format(
                frame["element"][i], frame["coord"][i][0], frame["coord"][i][1], frame["coord"][i][2],
                frame["q"][i]
            ))

            #frame["vx"][i], frame["vy"][i], frame["vz"][i]



class lmpdat:
    def __init__(self, filename):
        self.filename = filename
